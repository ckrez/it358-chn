{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IT358 Honeypot Lab Please refer to the accompanying D2L document with server IPs, URLs and SSH keys. These will be represented by the following variables in the documents: ${GROUP CHN SERVER} - CHN Server ${GROUP HP SERVER} - CHN Honeypot ${CIF SERVER} - CIF Server IP ${CIF SERVER URL} - CIF Server URL","title":"Using SSH"},{"location":"#it358-honeypot-lab","text":"Please refer to the accompanying D2L document with server IPs, URLs and SSH keys. These will be represented by the following variables in the documents: ${GROUP CHN SERVER} - CHN Server ${GROUP HP SERVER} - CHN Honeypot ${CIF SERVER} - CIF Server IP ${CIF SERVER URL} - CIF Server URL","title":"IT358 Honeypot Lab"},{"location":"build_server/","text":"Building CHN Server Connect to your Group's CHN Server host. Preparation Prepare to install CHN Server by creating the directory for CHN Server files. Accept any defaults during the install process sudo apt install -y python3 python3-pip && sudo pip3 install validators && cd /opt && sudo git clone https://github.com/CommunityHoneyNetwork/chn-quickstart.git chnserver && sudo chown -R ubuntu:docker /opt/chnserver Build CHN Server To build CHN Server, simply run the guided_docker_compose.py quickstart script: cd /opt/chnserver && python3 guided_docker_compose.py Since we're using a valid name on a publicly accessible IP address, we can use Let'sEncrypt to obtain a valid cert. When prompted, input the valid domain name for your group's CHN Server instance (refer to the D2L document) When prompted, set the Number of Days to \"30.\" When prompted, set the Certificate Strategy to \"CERTBOT.\" Answer \"no\" to the questions about logging and CIF. See below for sample output: Please enter the domain for your CHN Instance. Note that this must be a resolvable domain. Domain: workshop-chn-server-${TEAM}.security.duke.edu Please enter a Certificate Strategy. This should be one of: CERTBOT: Signed certificate by an ACME provider such as LetsEncrypt. Most folks will want to use this. You must ensure your URL is accessable from the ACME hosts for verification here BYO: Bring Your Own. Use this if you already have a signed cert, or if you want a real certificate without CertBot SELFSIGNED: Generate a simple self-signed certificate Certificate Strategy: CERTBOT Wrote file to config/sysconfig/chnserver.sysconfig Do you wish to enable logging to a remote CIFv3 server? [Y/n]: n Do you wish to enable logging to a local file? [Y/n]: n Do you wish to enable intelligence feeds from a remote CIF instance? [y/N]: n Start the server Start the CHN Server docker containers with the \"-d\" flag to run the containers in the background (daemon mode). docker-compose up -d This process should take several minutes as the machine pulls all the relevant images from DockerHub. When the process completes and your prompt returns, you should be able to browse to the CHN Server's web console in a web browser and receive a login screen to verify that CHN Server is running. Retrieve your CHN Server login credentials by running the following on the Server's SSH console: grep SUPERUSER /opt/chnserver/config/sysconfig/chnserver.env","title":"Building CHN Server"},{"location":"build_server/#building-chn-server","text":"Connect to your Group's CHN Server host.","title":"Building CHN Server"},{"location":"build_server/#preparation","text":"Prepare to install CHN Server by creating the directory for CHN Server files. Accept any defaults during the install process sudo apt install -y python3 python3-pip && sudo pip3 install validators && cd /opt && sudo git clone https://github.com/CommunityHoneyNetwork/chn-quickstart.git chnserver && sudo chown -R ubuntu:docker /opt/chnserver","title":"Preparation"},{"location":"build_server/#build-chn-server","text":"To build CHN Server, simply run the guided_docker_compose.py quickstart script: cd /opt/chnserver && python3 guided_docker_compose.py Since we're using a valid name on a publicly accessible IP address, we can use Let'sEncrypt to obtain a valid cert. When prompted, input the valid domain name for your group's CHN Server instance (refer to the D2L document) When prompted, set the Number of Days to \"30.\" When prompted, set the Certificate Strategy to \"CERTBOT.\" Answer \"no\" to the questions about logging and CIF. See below for sample output: Please enter the domain for your CHN Instance. Note that this must be a resolvable domain. Domain: workshop-chn-server-${TEAM}.security.duke.edu Please enter a Certificate Strategy. This should be one of: CERTBOT: Signed certificate by an ACME provider such as LetsEncrypt. Most folks will want to use this. You must ensure your URL is accessable from the ACME hosts for verification here BYO: Bring Your Own. Use this if you already have a signed cert, or if you want a real certificate without CertBot SELFSIGNED: Generate a simple self-signed certificate Certificate Strategy: CERTBOT Wrote file to config/sysconfig/chnserver.sysconfig Do you wish to enable logging to a remote CIFv3 server? [Y/n]: n Do you wish to enable logging to a local file? [Y/n]: n Do you wish to enable intelligence feeds from a remote CIF instance? [y/N]: n","title":"Build CHN Server"},{"location":"build_server/#start-the-server","text":"Start the CHN Server docker containers with the \"-d\" flag to run the containers in the background (daemon mode). docker-compose up -d This process should take several minutes as the machine pulls all the relevant images from DockerHub. When the process completes and your prompt returns, you should be able to browse to the CHN Server's web console in a web browser and receive a login screen to verify that CHN Server is running. Retrieve your CHN Server login credentials by running the following on the Server's SSH console: grep SUPERUSER /opt/chnserver/config/sysconfig/chnserver.env","title":"Start the server"},{"location":"configuring_chn/","text":"Configuring and Exploring CHN Server Containers Please Note: All the following docker-compose commands must be run from the directory which contains the docker-compose.yml file, in our workshop this should be /opt/chnserver . If you need to change to this directory at any point, simply issue the command: cd /opt/chnserver Running Containers Once CHN Server is running, you can check the status of your containers with the following docker-compose command: docker-compose ps Seeing Logs Full logs for the running Docker containers can be viewed using the following command docker-compose logs This can result in a large number of logs for a long-running container. Some options to help control the amount of data are to specify a container name and/or add a --tail command. For instance, this will show only the logs from the hpfeeds container: docker-compose logs hpfeeds You can also limit the log output to the last X lines for a particular container, for example: docker-compose logs --tail=10 chnserver It is often useful to tail the last few lines of logs and follow the logfile for any new lines, to see new items as they happen. Simply add the -f switch: docker-compose logs --tail=10 -f chnserver Try switching to your browser, refreshing the tab with the CHN Server web interface up, then switch back to the terminal to see that the logs have updated. Use Ctrl-C to stop following the logs and return to your prompt. Controlling Containers You can stop all the running containers using the following command. This will stop the containers but will leave the containers in their current state. docker-compose stop (Take a look at the container state again by running docker-compose ps ) If you wish to remove a specific container (after stopping it) you can remove it with the docker-compose rm command: docker-compose rm chnserver (Take a look at the container state again by running docker-compose ps ) You can stop and remove all running containers with the following command. If you have made any changes to the running containers themselves (not recommended!), this will effectively reset the containers. docker-compose down (Take a look at the container state again by running docker-compose ps ) Now let's bring all our containers back up again: docker-compose up -d This time the process is much faster, as the images are already stored locally. (Take a look at the container state again by running docker-compose ps ) (Re)set the web administrator password If you didn't set a default admin password in your chnserver.sysconfig file, you can use the following command to set the password, using admin@localhost as the email address. docker-compose exec chnserver python /opt/manual_password_reset.py After setting your password, REFRESH your CHN login screen and log into the web portal using the \"admin@localhost\" credential with the password you just set at https://workshop-chn-TEAM.security.duke.edu (don't forget to subsitute your number for TEAM!).","title":"Configuring chn"},{"location":"configuring_chn/#configuring-and-exploring-chn-server-containers","text":"Please Note: All the following docker-compose commands must be run from the directory which contains the docker-compose.yml file, in our workshop this should be /opt/chnserver . If you need to change to this directory at any point, simply issue the command: cd /opt/chnserver","title":"Configuring and Exploring CHN Server Containers"},{"location":"configuring_chn/#running-containers","text":"Once CHN Server is running, you can check the status of your containers with the following docker-compose command: docker-compose ps","title":"Running Containers"},{"location":"configuring_chn/#seeing-logs","text":"Full logs for the running Docker containers can be viewed using the following command docker-compose logs This can result in a large number of logs for a long-running container. Some options to help control the amount of data are to specify a container name and/or add a --tail command. For instance, this will show only the logs from the hpfeeds container: docker-compose logs hpfeeds You can also limit the log output to the last X lines for a particular container, for example: docker-compose logs --tail=10 chnserver It is often useful to tail the last few lines of logs and follow the logfile for any new lines, to see new items as they happen. Simply add the -f switch: docker-compose logs --tail=10 -f chnserver Try switching to your browser, refreshing the tab with the CHN Server web interface up, then switch back to the terminal to see that the logs have updated. Use Ctrl-C to stop following the logs and return to your prompt.","title":"Seeing Logs"},{"location":"configuring_chn/#controlling-containers","text":"You can stop all the running containers using the following command. This will stop the containers but will leave the containers in their current state. docker-compose stop (Take a look at the container state again by running docker-compose ps ) If you wish to remove a specific container (after stopping it) you can remove it with the docker-compose rm command: docker-compose rm chnserver (Take a look at the container state again by running docker-compose ps ) You can stop and remove all running containers with the following command. If you have made any changes to the running containers themselves (not recommended!), this will effectively reset the containers. docker-compose down (Take a look at the container state again by running docker-compose ps ) Now let's bring all our containers back up again: docker-compose up -d This time the process is much faster, as the images are already stored locally. (Take a look at the container state again by running docker-compose ps )","title":"Controlling Containers"},{"location":"configuring_chn/#reset-the-web-administrator-password","text":"If you didn't set a default admin password in your chnserver.sysconfig file, you can use the following command to set the password, using admin@localhost as the email address. docker-compose exec chnserver python /opt/manual_password_reset.py After setting your password, REFRESH your CHN login screen and log into the web portal using the \"admin@localhost\" credential with the password you just set at https://workshop-chn-TEAM.security.duke.edu (don't forget to subsitute your number for TEAM!).","title":"(Re)set the web administrator password"},{"location":"configuring_cif/","text":"Set Up Logging to CIFv3 Configuring logging to CIFv3 If you do not already have an SSH session established with your workshop-chn-server, SSH into your CHN Server instance. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} Updating CHN Server to log to CIFv3 Like when starting CHN Server, simply run the following commands: cd /opt/chnserver && python3 guided_docker_compose.py Answer \"n\" when asked about reconfiguring CHN Server. When you reach the question about enabling CIFv3, answer 'Y'. Enter the provided information for the CIF host URL, including the \"https\" portion: ${CIF SERVER} Enter the provided API Token. Also be sure to update the CIF_PROVIDER field to \"group-NUMBER\", where NUMBER is the group number you were assigned. Previous chn-server.sysconfig file detected. Do you wish to reconfigure? [Y/n]: n Do you wish to enable logging to a remote CIFv3 server? [Y/n]: Y Please enter the URL for the remote CIFv3 server: ${CIF SERVER} Please enter the API token for the remote CIFv3 server: ${CIF TOKEN} Please enter a name you wish to be associated with your organization: group-${GROUP} Wrote file to config/sysconfig/hpfeeds-cif.sysconfig Previous hpfeeds-logger.sysconfig file detected. Do you wish to reconfigure? [y/N]: n Start the hpfeeds-cif container Start hpfeeds-cif container with the following command: docker-compose up -d hpfeeds-cif Test your CIF install Please generate another honeypot event to ensure there's data to find. Open a new terminal tab/window, and export your team number again; for example if your team number is 50: Now, attempt to connect to the honeypot SSH port: On Mac/Linux: ssh -l ubuntu -p 2222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 2222 ${GROUP CHN SERVER} Now examine the hpfeeds-cif logs to see if you see a new event: docker-compose logs --tail=10 hpfeeds-cif Installing CIF Tools Seeing that data is submitted via logs is handy, but not very useful for using the data. We'll install the CIF SDK, which provides some command line tools for selecting, retrieving, and formatting data from a CIF server. For this workshop, we\u2019ll install the CIFv3 tools onto the CHN Server system, but the SDK can be installed on any Linux system. Begin by SSHing into the CHN Server host: On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} Once connected, install the CIFv3 pip package: sudo apt install python-pip -y && sudo pip install 'cifsdk>=3.0.0,<4.0' Next you need to create a new file, /home/ubuntu/.cif.yml , with the following contents. Remember to use either nano or vim to create this file: Create the file: nano /home/ubuntu/.cif.yml Then paste in these contents: token: <same value as CIF_TOKEN> remote: ${CIF SERVER URL} no_verify_ssl: true Now hit Ctrl-X to quit, answer y to save, and hit enter to keep your filename. You can now verify that you can connect to the CIF instance with the SDK using the following command: cif -p Which, when correctly configured and working properly, will return results like: roundtrip: 0.115531921387 ms roundtrip: 0.0400021076202 ms roundtrip: 0.0375020503998 ms roundtrip: 0.0692510604858 ms Querying CIF Now you can search for the entry you generated earlier, looking for your provider name with the following command. Be sure to substitute your group number in the provider field. For instance, if you're group number was 2: cif --tags honeypot --itype ipv4 --last-hour --provider group-2 Trying again without the --provider option will show you any other submissions from your classmates! cif --tags honeypot --itype ipv4 --last-hour Bonus Check out the project documentation for some more ideas on how you can use the CIF client to select and format data.","title":"Setting Up Logging to CIFv3"},{"location":"configuring_cif/#set-up-logging-to-cifv3","text":"","title":"Set Up Logging to CIFv3"},{"location":"configuring_cif/#configuring-logging-to-cifv3","text":"If you do not already have an SSH session established with your workshop-chn-server, SSH into your CHN Server instance. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER}","title":"Configuring logging to CIFv3"},{"location":"configuring_cif/#updating-chn-server-to-log-to-cifv3","text":"Like when starting CHN Server, simply run the following commands: cd /opt/chnserver && python3 guided_docker_compose.py Answer \"n\" when asked about reconfiguring CHN Server. When you reach the question about enabling CIFv3, answer 'Y'. Enter the provided information for the CIF host URL, including the \"https\" portion: ${CIF SERVER} Enter the provided API Token. Also be sure to update the CIF_PROVIDER field to \"group-NUMBER\", where NUMBER is the group number you were assigned. Previous chn-server.sysconfig file detected. Do you wish to reconfigure? [Y/n]: n Do you wish to enable logging to a remote CIFv3 server? [Y/n]: Y Please enter the URL for the remote CIFv3 server: ${CIF SERVER} Please enter the API token for the remote CIFv3 server: ${CIF TOKEN} Please enter a name you wish to be associated with your organization: group-${GROUP} Wrote file to config/sysconfig/hpfeeds-cif.sysconfig Previous hpfeeds-logger.sysconfig file detected. Do you wish to reconfigure? [y/N]: n","title":"Updating CHN Server to log to CIFv3"},{"location":"configuring_cif/#start-the-hpfeeds-cif-container","text":"Start hpfeeds-cif container with the following command: docker-compose up -d hpfeeds-cif","title":"Start the hpfeeds-cif container"},{"location":"configuring_cif/#test-your-cif-install","text":"Please generate another honeypot event to ensure there's data to find. Open a new terminal tab/window, and export your team number again; for example if your team number is 50: Now, attempt to connect to the honeypot SSH port: On Mac/Linux: ssh -l ubuntu -p 2222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 2222 ${GROUP CHN SERVER} Now examine the hpfeeds-cif logs to see if you see a new event: docker-compose logs --tail=10 hpfeeds-cif","title":"Test your CIF install"},{"location":"configuring_cif/#installing-cif-tools","text":"Seeing that data is submitted via logs is handy, but not very useful for using the data. We'll install the CIF SDK, which provides some command line tools for selecting, retrieving, and formatting data from a CIF server. For this workshop, we\u2019ll install the CIFv3 tools onto the CHN Server system, but the SDK can be installed on any Linux system. Begin by SSHing into the CHN Server host: On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} Once connected, install the CIFv3 pip package: sudo apt install python-pip -y && sudo pip install 'cifsdk>=3.0.0,<4.0' Next you need to create a new file, /home/ubuntu/.cif.yml , with the following contents. Remember to use either nano or vim to create this file: Create the file: nano /home/ubuntu/.cif.yml Then paste in these contents: token: <same value as CIF_TOKEN> remote: ${CIF SERVER URL} no_verify_ssl: true Now hit Ctrl-X to quit, answer y to save, and hit enter to keep your filename. You can now verify that you can connect to the CIF instance with the SDK using the following command: cif -p Which, when correctly configured and working properly, will return results like: roundtrip: 0.115531921387 ms roundtrip: 0.0400021076202 ms roundtrip: 0.0375020503998 ms roundtrip: 0.0692510604858 ms","title":"Installing CIF Tools"},{"location":"configuring_cif/#querying-cif","text":"Now you can search for the entry you generated earlier, looking for your provider name with the following command. Be sure to substitute your group number in the provider field. For instance, if you're group number was 2: cif --tags honeypot --itype ipv4 --last-hour --provider group-2 Trying again without the --provider option will show you any other submissions from your classmates! cif --tags honeypot --itype ipv4 --last-hour","title":"Querying CIF"},{"location":"configuring_cif/#bonus","text":"Check out the project documentation for some more ideas on how you can use the CIF client to select and format data.","title":"Bonus"},{"location":"configuring_logging/","text":"Setting Up Logging for Honeypot Data Connect to the CHN Server Host If you do not already have an SSH session established with your CHN Server, SSH into your CHN Server instance. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} Create hpfeeds-logger.sysconfig Like when starting CHN Server, simply run the following commands: cd /opt/chnserver && python3 guided_docker_compose.py Answer \"n\" when asked about reconfiguring CHN Server. Answer \"n\" when asked about logging to a remote CIFv3 server. Answer \"y\" when asked about logging to a local file. Answer \"n\" when asked about enable intelligence feeds from a CIFv3 server. Fill in \"json\" for the Logging Format Previous chn-server.sysconfig file detected. Do you wish to reconfigure? [y/N]: n Do you wish to enable logging to a remote CIFv3 server? [y/N]: n Do you wish to enable logging to a local file? [y/N]: y splunk: Comma delimited key/value logging format for use with Splunk json: JSON formatted log format arcsight: Log format for use with ArcSight SIEM appliances json_raw: Raw JSON output from hpfeeds. More verbose that other formats, but also not normalized. Can generate a large amount of data. Logging Format: splunk Wrote file to config/sysconfig/hpfeeds-logger.sysconfig Start the hpfeeds-logger container Start the hpfeeds-logger container with the following command: docker-compose up -d hpfeeds-logger Checking your setup You should now have a new directory /opt/chnserver/storage/hpfeeds-logs . List this directory to see a new file, chn.log: ls -l /opt/chnserver/storage/hpfeeds-logs You can show the contents of this file with the cat command: cat /opt/chnserver/storage/hpfeeds-logs/chn.log Your file may be empty at the moment. To test your honeypot, we can simulate an attack by trying to log into our new honeypot using SSH to port 2222. Test your honeypot Open a new terminal tab/window, and export your team number again; for example if your team number is 50: export TEAM=50 Now, attempt to connect to the honeypot SSH port to trigger an alert: On Mac/Linux: ssh -l attacker -p 2222 ${GROUP HP SERVER} On Windows: ssh -l attacker -p 2222 ${GROUP HP SERVER} If you're using Putty, you can use the \"Load\" button for your normal workshop-chn-hp connection, and change the port before connecting to simulate an attack. You can now cat /opt/chnserver/storage/hpfeeds-logs/chn.log the log file again, and you should see data about your attempt to log in.","title":"Setting Up Logging for Honeypot Data"},{"location":"configuring_logging/#setting-up-logging-for-honeypot-data","text":"","title":"Setting Up Logging for Honeypot Data"},{"location":"configuring_logging/#connect-to-the-chn-server-host","text":"If you do not already have an SSH session established with your CHN Server, SSH into your CHN Server instance. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER}","title":"Connect to the CHN Server Host"},{"location":"configuring_logging/#create-hpfeeds-loggersysconfig","text":"Like when starting CHN Server, simply run the following commands: cd /opt/chnserver && python3 guided_docker_compose.py Answer \"n\" when asked about reconfiguring CHN Server. Answer \"n\" when asked about logging to a remote CIFv3 server. Answer \"y\" when asked about logging to a local file. Answer \"n\" when asked about enable intelligence feeds from a CIFv3 server. Fill in \"json\" for the Logging Format Previous chn-server.sysconfig file detected. Do you wish to reconfigure? [y/N]: n Do you wish to enable logging to a remote CIFv3 server? [y/N]: n Do you wish to enable logging to a local file? [y/N]: y splunk: Comma delimited key/value logging format for use with Splunk json: JSON formatted log format arcsight: Log format for use with ArcSight SIEM appliances json_raw: Raw JSON output from hpfeeds. More verbose that other formats, but also not normalized. Can generate a large amount of data. Logging Format: splunk Wrote file to config/sysconfig/hpfeeds-logger.sysconfig","title":"Create hpfeeds-logger.sysconfig"},{"location":"configuring_logging/#start-the-hpfeeds-logger-container","text":"Start the hpfeeds-logger container with the following command: docker-compose up -d hpfeeds-logger","title":"Start the hpfeeds-logger container"},{"location":"configuring_logging/#checking-your-setup","text":"You should now have a new directory /opt/chnserver/storage/hpfeeds-logs . List this directory to see a new file, chn.log: ls -l /opt/chnserver/storage/hpfeeds-logs You can show the contents of this file with the cat command: cat /opt/chnserver/storage/hpfeeds-logs/chn.log Your file may be empty at the moment. To test your honeypot, we can simulate an attack by trying to log into our new honeypot using SSH to port 2222.","title":"Checking your setup"},{"location":"configuring_logging/#test-your-honeypot","text":"Open a new terminal tab/window, and export your team number again; for example if your team number is 50: export TEAM=50 Now, attempt to connect to the honeypot SSH port to trigger an alert: On Mac/Linux: ssh -l attacker -p 2222 ${GROUP HP SERVER} On Windows: ssh -l attacker -p 2222 ${GROUP HP SERVER} If you're using Putty, you can use the \"Load\" button for your normal workshop-chn-hp connection, and change the port before connecting to simulate an attack. You can now cat /opt/chnserver/storage/hpfeeds-logs/chn.log the log file again, and you should see data about your attempt to log in.","title":"Test your honeypot"},{"location":"final/","text":"Finishing up Thank you for participating today! Additional Exercises Try deploying some of the other honeypots available via the deploy scripts, or modifying the deployment scripts to do something different, or explore the CHN Server API. Modify a deployment script Since these VM's run SSH on an alternate port (4222), you can have a cowrie honeypot listen on the default SSH port. Modify the Deployment script to change which port Cowrie runs on when deployed. To do this, selec the Ubuntu - Cowrie script from the Deployment tab in CHN Server. Look at the Section entitled \"Script\". Note the lines where the docker-compose.yml file is created, specifically under the \"ports:\" section: version: '2' services: cowrie: image: stingar/cowrie:1.8 volumes: - ./cowrie.sysconfig:/etc/default/cowrie - ./cowrie:/etc/cowrie ports: - \"2222:2222\" - \"23:2223\" Change the first number for the 2222:2222 entry to instead read 22:2222 . Then scroll to the bottom of the page and press the \"Update\" button to save your changes. This change tells Docker to map the port 22 to the internal Docker network port 2222 , which is where the Cowrie container is listening. Now that the deployment script has been changed, copy the \"Deploy Command\" and SSH to your honeypot server. Run the Deploy Command on the honeypot server, then use docker ps to verify that the honeypot is now listening on the default SSH port. Deploy a Dionaea Honeypot Open a new terminal tab/window, and export your team number again; for example if your team number is 22: export TEAM=22 Prepare your honeypot vm for deploying a new honeypot. First, let's stop the existing honeypot and remove it's information: ssh -l ubuntu -p 4222 workshop-chn-hp-${TEAM}.security.duke.edu cd ~ docker-compose down docker system prune sudo rm -rf ~/* Now go back to the CHN Server web interface, navigate to the Deploy tab, select the Ubuntu - Dionaea script, and copy the command. Then paste this command into the honeypot terminal window. This should take a moment, mostly in downloading the new Docker image. Once this is complete, go back to the web interface for CHN Server and check the Sensors tab to see the new sensor. Explore what services Dionaea provides and see if you can create an event. Check your logs and CIF to see if that event shows up there as well. Hint: docker-compose ps on the honeypot server can help you identify which ports are open. Explore the CHN Server API Please refer to the project documentation for details on the API.","title":"Final"},{"location":"final/#finishing-up","text":"Thank you for participating today!","title":"Finishing up"},{"location":"final/#additional-exercises","text":"Try deploying some of the other honeypots available via the deploy scripts, or modifying the deployment scripts to do something different, or explore the CHN Server API.","title":"Additional Exercises"},{"location":"final/#modify-a-deployment-script","text":"Since these VM's run SSH on an alternate port (4222), you can have a cowrie honeypot listen on the default SSH port. Modify the Deployment script to change which port Cowrie runs on when deployed. To do this, selec the Ubuntu - Cowrie script from the Deployment tab in CHN Server. Look at the Section entitled \"Script\". Note the lines where the docker-compose.yml file is created, specifically under the \"ports:\" section: version: '2' services: cowrie: image: stingar/cowrie:1.8 volumes: - ./cowrie.sysconfig:/etc/default/cowrie - ./cowrie:/etc/cowrie ports: - \"2222:2222\" - \"23:2223\" Change the first number for the 2222:2222 entry to instead read 22:2222 . Then scroll to the bottom of the page and press the \"Update\" button to save your changes. This change tells Docker to map the port 22 to the internal Docker network port 2222 , which is where the Cowrie container is listening. Now that the deployment script has been changed, copy the \"Deploy Command\" and SSH to your honeypot server. Run the Deploy Command on the honeypot server, then use docker ps to verify that the honeypot is now listening on the default SSH port.","title":"Modify a deployment script"},{"location":"final/#deploy-a-dionaea-honeypot","text":"Open a new terminal tab/window, and export your team number again; for example if your team number is 22: export TEAM=22 Prepare your honeypot vm for deploying a new honeypot. First, let's stop the existing honeypot and remove it's information: ssh -l ubuntu -p 4222 workshop-chn-hp-${TEAM}.security.duke.edu cd ~ docker-compose down docker system prune sudo rm -rf ~/* Now go back to the CHN Server web interface, navigate to the Deploy tab, select the Ubuntu - Dionaea script, and copy the command. Then paste this command into the honeypot terminal window. This should take a moment, mostly in downloading the new Docker image. Once this is complete, go back to the web interface for CHN Server and check the Sensors tab to see the new sensor. Explore what services Dionaea provides and see if you can create an event. Check your logs and CIF to see if that event shows up there as well. Hint: docker-compose ps on the honeypot server can help you identify which ports are open.","title":"Deploy a Dionaea Honeypot"},{"location":"final/#explore-the-chn-server-api","text":"Please refer to the project documentation for details on the API.","title":"Explore the CHN Server API"},{"location":"first_honeypot/","text":"Deploying Your First Honeypot Deploy a Cowrie honeypot Switch to your web browser and log into the web portal for CHN Server (if your tab isn't already up). From the menu at the top left, click \"Deploy\" in the menu bar. Next select the field labeled \"Script\" and select the \"Ubuntu - Cowrie\" option. Next, Copy the \"Deploy Command\" from the web interface. Switch to the SSH terminal for your honeypot host and create a configuration directory for this honeypot (in this case, cowrie): mkdir ~/cowrie && cd ~/cowrie Paste the \"Deploy Command\" into the terminal for the Honeypot host . The script will generate the appropriate docker-compose.yml and sysconfig files, then start the docker-compose process to retrieve and run the images. Your output should look similar to the below: Once the honeypot has been deployed, switch back the the CHN Server web interface. Select the \"Sensor\" tab from the menu and verify that the honeypot has successfully registered to CHN Server. Repeat this process for the following honeypots: Ubuntu - RDPHoney Ubuntu - UHP","title":"Deploying Your First Honeypot"},{"location":"first_honeypot/#deploying-your-first-honeypot","text":"","title":"Deploying Your First Honeypot"},{"location":"first_honeypot/#deploy-a-cowrie-honeypot","text":"Switch to your web browser and log into the web portal for CHN Server (if your tab isn't already up). From the menu at the top left, click \"Deploy\" in the menu bar. Next select the field labeled \"Script\" and select the \"Ubuntu - Cowrie\" option. Next, Copy the \"Deploy Command\" from the web interface. Switch to the SSH terminal for your honeypot host and create a configuration directory for this honeypot (in this case, cowrie): mkdir ~/cowrie && cd ~/cowrie Paste the \"Deploy Command\" into the terminal for the Honeypot host . The script will generate the appropriate docker-compose.yml and sysconfig files, then start the docker-compose process to retrieve and run the images. Your output should look similar to the below: Once the honeypot has been deployed, switch back the the CHN Server web interface. Select the \"Sensor\" tab from the menu and verify that the honeypot has successfully registered to CHN Server. Repeat this process for the following honeypots: Ubuntu - RDPHoney Ubuntu - UHP","title":"Deploy a Cowrie honeypot"},{"location":"preparing/","text":"Prepare your hosts Connecting to your CHN hosts We'll begin the server install by SSHing to the CHN Server host and Honeypot host on port 4222, using the username 'ubuntu' username and SSH private key. On Mac/Linux: ssh -l ubuntu -p 4222 -i it358.pem ${GROUP CHN SERVER} ssh -l ubuntu -p 4222 -i it358.pem ${GROUP HP SERVER} On Windows: ssh -l ubuntu -p 4222 -i it358.pem ${GROUP CHN SERVER} ssh -l ubuntu -p 4222 -i it358.pem ${GROUP HP SERVER} Preparing the hosts First we'll update the repositories on the host and install docker using apt. Later we'll need to reconnect, so let's also upgrade all packages. After the package is installed, we'll ensure our ubuntu user is in the docker group, and that docker is set to start on boot. Finally, we'll reboot the system to ensure a clean starting point. Paste the following line into the terminal window for both the CHN Server host as well as the honeypot host. sudo apt update && sudo apt upgrade -y && sudo apt install -y docker-compose jq && sudo usermod -aG docker ubuntu && sudo systemctl enable docker && sudo reboot Once your host reboots, your session will end an you will need to wait approximately 30 seconds and then reconnect to the CHN Server host and honeypot host. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} and On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP HP SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP HP SERVER} A Note on Editors In the terminal environment you will need to add text to files. There are two editors available by default on the hosts we've provided: nano and vim . If you don't know which you'd prefer, please use nano . To edit or create a new file, simply type: nano filename","title":"Prepare your hosts"},{"location":"preparing/#prepare-your-hosts","text":"","title":"Prepare your hosts"},{"location":"preparing/#connecting-to-your-chn-hosts","text":"We'll begin the server install by SSHing to the CHN Server host and Honeypot host on port 4222, using the username 'ubuntu' username and SSH private key. On Mac/Linux: ssh -l ubuntu -p 4222 -i it358.pem ${GROUP CHN SERVER} ssh -l ubuntu -p 4222 -i it358.pem ${GROUP HP SERVER} On Windows: ssh -l ubuntu -p 4222 -i it358.pem ${GROUP CHN SERVER} ssh -l ubuntu -p 4222 -i it358.pem ${GROUP HP SERVER}","title":"Connecting to your CHN hosts"},{"location":"preparing/#preparing-the-hosts","text":"First we'll update the repositories on the host and install docker using apt. Later we'll need to reconnect, so let's also upgrade all packages. After the package is installed, we'll ensure our ubuntu user is in the docker group, and that docker is set to start on boot. Finally, we'll reboot the system to ensure a clean starting point. Paste the following line into the terminal window for both the CHN Server host as well as the honeypot host. sudo apt update && sudo apt upgrade -y && sudo apt install -y docker-compose jq && sudo usermod -aG docker ubuntu && sudo systemctl enable docker && sudo reboot Once your host reboots, your session will end an you will need to wait approximately 30 seconds and then reconnect to the CHN Server host and honeypot host. On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP CHN SERVER} and On Mac/Linux: ssh -l ubuntu -p 4222 ${GROUP HP SERVER} On Windows: ssh -l ubuntu -p 4222 ${GROUP HP SERVER} A Note on Editors In the terminal environment you will need to add text to files. There are two editors available by default on the hosts we've provided: nano and vim . If you don't know which you'd prefer, please use nano . To edit or create a new file, simply type: nano filename","title":"Preparing the hosts"}]}